/*
fig supports single line comment but fig supports multine comments.
/* nested multiline comments even if not recommended are supported*/
*/

empty = # option with no value is valid

# line can be ended or via a newline or via a semicolon
delimiter1 = newline
delimiter2 = semicolon;

numbers {
  # integers are supported
  int   = 42
  negi  = -42
  bin   = 0b101010
  oct   = 0o42
  hex   = 0xdead_beaf

  # float also are supported
  float1 = 3.14
  float1 = 2e16
  negf   = -3.14
}

multipliers {
  kilo    = 100K
  mega    = 100Mb
  minutes = 120m
  hours   = 2h
}

local = 42

strings {
  single  = 'foobar'
  double  = "foobar"
  heredoc = <<EOF
  only heredoc can have multiline string
  the quick brown fox
  jumps
  over the lazy dog

  blanks (space, tabs, newline) in heredoc are kept! this is why the closing label
  should always be at the very beginning of a line
EOF
  template = `echo ${local}`
}

variables {
  local = $local
  env   = @env
  array = [
    $local,
    @env,
  ]
}

booleans {
  truthy = true
  falsy  = false
}

arrays {
  empty  = []
  simple = [1, 2, 3]
  multiline1 = [
    "foo",
    "bar", # trailing comma is allow
  ]
  multiline2 = [
    "foo",
    "bar"
  ]
  nested = [
    "foo",
    "bar",
    [true, 1, false, 2]
  ]
  # automatic array creation
  auto = "foo"
  auto = "bar"
  auto = ["alpha", "omega"]
}

# object with the same declared multiple time automatically create an array of object
# at any level of depth
object {
  key = first
  # nested object
  props {
    name = "alpha"
    addr = "alphÃ¦@fig.org"
  }
  nested {
    code   = 1
    update = true
  }
  nested {
    code   = 42
    update = false
  }
  .include("testdata/include.fig", name="sample", fatal=false, method=replace)
}

object {
  key = second
  # nested object
  props {
    name = "omega"
    addr = "omega@fig.org"
  }
  .include("testdata/include.fig", name="sample", fatal=false, method=merge)
}

# .define: macro defines an object with set of key that can be reused anywhere
# in the document via the .apply macro
.define(magic) {
  number = 7
  number = 23
  name   = foobar
}

.extend(magic, as=extended_magic) {
  all = true
}

depth = 1
test {
  .apply(extended_magic, fields=[number, name, all], method=merge)
}

.repeat(4, name="repeaters") {
  .apply(magic)
}

name  = foobar
call1 = join([1, 2, 3], "|")
call2 = repeat("test", 5)
call3 = upper(lower("foobar"))
call4 = uuid3($name)

# functions {
#   echo(arg1, karg1=value, karg2=value) {
#     # expression
#   }
#   call = echo(1, karg1=2, karg2=2)
#   expr = 1 + 2
# }

array = [1, 2, 3, 4, 5]
index = $array[-2]
slice1 = $array[1:3]
slice2 = $array[1:]
slice3 = $array[:3]
slice4 = $array[:]

slice5 = [1, 2, 3, 4][2:]

.ifeq($local, 42) {
  key1-ifeq = foo42
  key2-ifeq = bar42
}

.ifneq($local, 0) {
  key1-ifneq = foo0
  key2-ifneq = bar0
}

.ifeq(@lang, en) {
  lang = @lang
}

.ifdef($local) {
  key1-ifdef = foo1
  key2-ifdef = foo2
}

.ifndef($global) {
  key1-ifndef = bar1
  key2-ifndef = bar2
}
